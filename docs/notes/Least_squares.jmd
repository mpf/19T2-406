# **Least Squares**

In this lecture, we will cover least squares for data fitting, linear systems, properties of least squares and QR factorization.

## **Least squares for data fitting**

Consider the problem of fitting a line to observations $y_i$ gven input $z_i$ for $i = 1,\dots, n$. 

```julia; echo=false
using Plots
pyplot(size=(300,300), legend=false)

n = 20
m = .2
b = 1.5
noise = 0.1*rand(n,1)
z = range(0, stop=1, length=n)
y = m.*z.+b + noise
plot(z,y,seriestype=:scatter,xlabel="z",ylabel="y")
```

In the figure above, the data points seem to follow a linear trend. The question we would like address is what is the best 


```julia; echo=false
A = [z ones(n,1)]
AtA = A'*A
Atb = A'*y
x = AtA\Atb
yls = x[1].*z.+x[2];
```
<center>
```julia; echo=false
plot!(z,yls,seriestype=:line,xlabel="z",ylabel="y")
```
</center>

DSP.jl package doesn't (yet) have a method to calculate the
the frequency response of a FIR filter so we define it:

```julia
using Plots, DSP
gr()

function FIRfreqz(b::Array, w = range(0, stop=Ï€, length=1024))
    n = length(w)
    h = Array{ComplexF32}(undef, n)
    sw = 0
    for i = 1:n
      for j = 1:length(b)
        sw += b[j]*exp(-im*w[i])^-j
      end
      h[i] = sw
      sw = 0
    end
    return h
end
```

## Design Lowpass FIR filter


Designing a lowpass FIR filter is very simple to do with DSP.jl, all you
need to do is to define the window length, cut off frequency and the
window. We will define a lowpass filter with cut off frequency at 5Hz for a signal
sampled at 20 Hz.
We will use the Hamming window, which is defined as:
$w(n) = \alpha - \beta\cos\frac{2\pi n}{N-1}$, where $\alpha=0.54$ and $\beta=0.46$

```julia
fs = 20
f = digitalfilter(Lowpass(5, fs = fs), FIRWindow(hamming(61)))
w = range(0, stop=pi, length=1024)
h = FIRfreqz(f, w)
```

## Plot the frequency and impulse response


The next code chunk is executed in term mode, see the [script](FIR_design.jl) for syntax.

```julia; term=true
h_db = log10.(abs.(h));
ws = w/pi*(fs/2)
```

```julia
plot(ws, h_db,
      xlabel = "Frequency (Hz)", ylabel = "Magnitude (db)")
```

And again with default options

```julia
h_phase = unwrap(-atan.(imag.(h),real.(h)))
plot(ws, h_phase,
    xlabel = "Frequency (Hz)", ylabel = "Phase (radians)")
```
